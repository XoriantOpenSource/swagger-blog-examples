/*******************************************************************************
 * Copyright 2017 Xoriant Corporation.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.InlineResponse2001;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2017-08-22T11:29:03.578Z")

@Api(value = "slots", description = "the slots API")
public interface SlotsApi {

    @ApiOperation(value = "Deletes Slots for an Id", notes = "delete operation", response = Void.class, tags={ "Slots", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid Id supplied", response = Void.class),
        @ApiResponse(code = 404, message = "Slot not found", response = Void.class) })
    
    @RequestMapping(value = "/slots/{slotId}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteSlotsById(@ApiParam(value = "Slot Id to delete",required=true ) @PathVariable("slotId") Long slotId);


    @ApiOperation(value = "Find Slots by slotId", notes = "Get Slots for specified slotId", response = InlineResponse2001.class, responseContainer = "List", tags={ "Slots", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Slots response", response = InlineResponse2001.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid Id supplied", response = Void.class),
        @ApiResponse(code = 404, message = "Slot not found", response = Void.class),
        @ApiResponse(code = 405, message = "Validation exception", response = Void.class) })
    
    @RequestMapping(value = "/slots/{slotId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<InlineResponse2001>> getSlotsBySlotId(@ApiParam(value = "slotId to find",required=true ) @PathVariable("slotId") List<String> slotId);


    @ApiOperation(value = "Updates a Slot with form data", notes = "", response = Void.class, tags={ "Slots", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input", response = Void.class) })
    
    @RequestMapping(value = "/slots/{slotId}",
        produces = { "application/xml", "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    ResponseEntity<Void> updateSlotsForDoctorId(@ApiParam(value = "ID of Slot that needs to be updated",required=true ) @PathVariable("slotId") Long slotId,@ApiParam(value = "Updated Doctor Id") @RequestPart(value="doctorId", required=false)  Long doctorId);

}
